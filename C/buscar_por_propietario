#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <dirent.h>
#include <sys/stat.h>
#include <limits.h>

/* Prototipo de la función que realiza la búsqueda */
void search_files_by_owner(const char *dir_path, uid_t owner);

/**
 * La función principal  main, tiene la siguiente lógica:
 *  - Valida el número de argumentos.
 *  - Convierte el argumento correspondiente al UID y verifica errores.
 *  - Llama a search_files_by_owner para procesar el directorio.
 */
int main(int argc, char *argv[]) {
    if (argc != 3) {
        fprintf(stderr, "Uso: %s <directorio> <uid>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    const char *dir_path = argv[1];

    /* Conversión del UID */
    char *endptr;
    errno = 0;
    long uid_long = strtol(argv[2], &endptr, 10);
    if (errno != 0 || *endptr != '\0' || uid_long < 0) {
        fprintf(stderr, "Error: UID '%s' no es un número válido.\n", argv[2]);
        exit(EXIT_FAILURE);
    }
    uid_t target_uid = (uid_t)uid_long;

    search_files_by_owner(dir_path, target_uid);

    return EXIT_SUCCESS;
}

/**
 * Función search_files_by_owner, lógica desarrollada:
 *  - Abre el directorio indicado.
 *  - Recorre sus entradas (omitiendo "." y "..").
 *  - Para cada entrada, construye la ruta completa y utiliza stat() para obtener sus atributos.
 *  - Si el fichero es propiedad del usuario especificado (st_uid coincide con owner), lo muestra por pantalla.
 */
void search_files_by_owner(const char *dir_path, uid_t owner) {
    DIR *dir = opendir(dir_path);
    if (dir == NULL) {
        fprintf(stderr, "Error al abrir el directorio '%s': %s\n", dir_path, strerror(errno));
        exit(EXIT_FAILURE);
    }

    struct dirent *entry;
    while ((entry = readdir(dir)) != NULL) {
        /* Omitir entradas especiales "." y ".." */
        if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0)
            continue;

        /* Construir la ruta completa del fichero */
        char full_path[PATH_MAX];
        if (snprintf(full_path, sizeof(full_path), "%s/%s", dir_path, entry->d_name) >= sizeof(full_path)) {
            fprintf(stderr, "Ruta demasiado larga: %s/%s\n", dir_path, entry->d_name);
            continue;
        }

        struct stat file_stat;
        if (stat(full_path, &file_stat) == -1) {
            fprintf(stderr, "Error al obtener información de '%s': %s\n", full_path, strerror(errno));
            continue;
        }

        /* Comprobar si el fichero es propiedad del usuario indicado */
        if (file_stat.st_uid == owner) {
            printf("%s\n", full_path);
        }
    }

    closedir(dir);
}
